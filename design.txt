Design Assumptions:
1.	The Data in the excel files is always correct and in the right format as such the application
	 might fail if the data is not well formatted.Extension must be (.xlsx)
2.	When the traffic delay is accounted for, the distance between to point is increased by traffic delay.
Development Approach:
1.	Build on spring-boot, JPA.
2.	Implemented algorithm is Dijkstra greedy algorithm.
3.	The algorithm is applied on the undirected graph; this means the graph can be traversed in both directions.
4.	Two tables are created, the other tables, contain references which is just node names and planets names as well their entity Id. 
5.	Another table is constructed to describe distance between two nodes as well as the traffic delay.
6.	Origin and destination are represented as integers this become useful for construction of the graph. 
Front-End:
1.	Front end is build using angular framework and scss styling.

Running the application:
•	The deployable application is *.jar file is target matome-0.0.1-SNAPSHOT.jar
Back-End
Run the following command in the root directory of the project (one of them): 
mvn clean spring-boot:run   or  java -jar target/ matome-0.0.1-SNAPSHOT.jar
•	To see the list of exposed-end points  http://localhost:8001/swagger-ui.html exposed using swagger
•	Expose the algorithm using a Document Literal Web service, was not done, I only exposed the request document which was be found http://localhost:8001/ws/shortest.wsdl the reason for this is because I have little knowledge of SOAP and xsd, with little time, a week of I could actually implement it all.
Front-end
Run the following commands:
•	npm install --save
•	ng serve 
For running front end alternatively, you can run:
•	npm install --save
•	ng build –prod

* The above give error delete node_module folder and re-run the commants
The last command will generate a dist folder in root directory of Front-End which can be thrown behind nginx server. (I have actually provided a dist folder in case something goes wrong)

Run time assumption
•	 The person executing java source code has the java 11 runtime environment correctly installed and nodejs v12.19.0.

Disclaimer:  Docker configuration is not finished because as it was not requirement, but I am more than willing to provide the complete docker configuration and images.


One technical issue is that this particular repo has multiple contributors and this is because I work on different GitHub accounts and when I commit to them I need to correctly use username, in this case I just forgot to actual change them. I could have git rebase -i commit_hash but I see no need. I am more open to discussing this project.




